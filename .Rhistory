help(lm)
y = 3
x1 = 2
x2 = 4
library(datasets)
Rprof()
fit<-lm(y ~ x1 + x2)
Rprof(NULL)
summarryRprof()
summaryRprof()
library(datasets)
Rprof()
fit<-lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
instal.packages("UsingR")
install.packages("UsingR")
beta1 <- sum(y*x)/sum(x^2)
beta1
c(beta1,coef(lm(y~x))|2])
c(beta1,coef(lm(y~x))[2])
data(mtcars)
?mpg
beta1 <- sum(mtcars$mpg*mtcars$wt)/sum(mtcars$wt^2)
c(beta1,coef(lm(y~x))[2])
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xn <- (x - mean(x))/sd(x)
xn[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1 <- cor(y, x) * sd(x) / sd(y)
beta0 <- mean(x) - beta1 * mean(y)
rbind(c(beta0, beta1), coef(lm(x ~ y)))
yn <- (y - mean(y))/sd(y)
xn <- (x - mean(x))/sd(x)
c(cor(y, x), cor(yn, xn), coef(lm(yn ~ xn))[2])
yc <- y - mean(y)
xc <- x - mean(x)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum((x-0.573)^2)
sum((x-0.8)^2)
sum((x-0.36)^2)
sum((x-0.44)^2)
xyplot()
install.packages("lattice")
library(lattice)
?xyplot
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time , BodyWeight)
xyplot(weight ~ Time )
xyplot(weight ~ Time | Diet, BodyWeight)
BodyWeighy
help(llines)
help(axis)
?points
?lines
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?print.trellis
?splom
?par
?trellis.par.set
install.packages("ggplot2")
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
dir()
getwd()
setwd("../Downloads//repdata_data_activity")
data <- read.csv("activity.csv")
data
data$steps
mean(data[!is.na(data$steps),])
mean(data[!is.na(data$steps),1])
data$steps
mean(data[!is.na(data$steps),$steps])
mean(data[!is.na(data$steps),steps])
mean(data[!is.na(data$steps),"steps"])
histogram(data$steps,data$interval)
histogram(data$interval,data$steps)
help(histogram)
histogram(steps|interval,data$steps)
histogram(steps|interval,data)
histogram(steps|interval,data=data)
histogram(steps|interval,data="data")
dataFrame <- read.csv("activity.csv")
histogram(steps|interval,data=dataFrame)
histogram($steps | interval,data=dataFrame)
histogram(dataFrame$steps | dataFrame$interval)
histogram(~dataFrame$steps | dataFrame$interval)
histogram(~sum(dataFrame$steps) | dataFrame$interval)
?sum
?histogram
histogram(sum(dataFrame$steps) | dataFrame$interval)
dataFrame
names(dataFrame)
histogram(sum(dataFrame$steps) | dataFrame$date)
histogram(~sum(dataFrame$steps) | dataFrame$date)
histogram(~dataFrame$steps | dataFrame$date)
xyplot(~dataFrame$steps | dataFrame$date)
histogram(~dataFrame$steps | dataFrame$date)
histogram(dataFrame$steps~dataFrame$date )
histogram(dataFrame$steps~dataFrame$date,type="count")
xyplot(dataFrame$steps~dataFrame$date,type="count")
xyplot(dataFrame$steps~dataFrame$interval|dataFrame$date,type="count")
histogram(dataFrame$steps~dataFrame$interval|dataFrame$date)
histogram(dataFrame$steps~dataFrame$date)
histogram(dataFrame$steps~dataFrame$interval|dataFrame$date)
data2 <- sapply(split(df$steps,df$date),sum)
data2 <- sapply(split(data$steps,data$date),sum)
data2
histogram(data2$steps~data2$date)
histogram(data2[1~data2[2])
histogram(data2[1]~data2[2])
data2[1]
data2[,1]
data2(,1)
data2[1][1]
data2[1][2]
data2[2][1]
histogram(data2)
data2
data2(,)
data2[,]
data2[,1]
data2[1]
size(data2)
length(data2)
dim(data2)
histogram(data2~data$date)
histogram(~data2|data$date)
histogram(~data2)
histogram(data2~data$date,na.rm=true)
histogram(data2~data$date,na.rm=TRUE)
xyplot(data2~data$date,na.rm=TRUE)
data2
xyplot(data2,na.rm=TRUE)
xyplot(data$date,data2,na.rm=TRUE)
histogram(data2)
?tapply
data2 <- tapply(split(df$steps,df$date),sum)
data2 <- tapply(df$date,split(df$steps,df$date),sum)
split(df$steps,df$date)
split(dat$steps,data$date)
split(data$steps,data$date)
data2 <- tapply(ddata$date,split(data$steps,data$date),sum)
data2 <- tapply(data$date,split(data$steps,data$date),sum)
?sapply
data2 <- sapply(split(data$steps,data$date),sum)
data2 <- sapply(split(data$steps,data$date)[data$steps],sum)
data2
s <- split(data$steps,data$date)
s$steps
s[1]
sum(s)
sapply(s,sum)
data2
data2 <- sapply(s,sum)
data2[1]
data2 <- sapply(s$steps,sum)
data2[1]
data2
s$steps
s
data2 <- sapply(s$steps,sum)
data2 <- sapply(s,sum)
sum(data2)
histo(data2~|data$date)
histo(data2|data$date)
histogram(data2|data$date)
histogram(data2~data$date)
histogram(data2~data$date,na.rm=TRUE)
ggplot(data, aes(x = date, y = steps)) + geom_histogram(stat = "identity") +
labs(title="Histogram of the total number of steps taken each day",
x="Date", y="Total number of steps")
?aggregate
data2 <- aggregate(data$steps,by=list(data$date),FUN=sum,na.rm=TRUE)
data2
histogram(data2$x|data2$Group.1)
histogram(~data2$x|data2$Group.1)
histogram(data2$x~data2$Group.1)
histogram(data2$Group.1~data2$x)
barplot(stepsEachDay$x)
barplot(data2$x)
?barplot
barplot(data2$x,data2$Group.1)
barplot(data2$x,width=data2$Group.1)
barplot(data2$x,names.arg=data2$Group.1)
data2$Group.1
barplot(data2$x,names.arg=data2$Group.1,axisnames=TRUE)
barplot(data2$x,names.arg=data2$Group.1,axisnames=TRUE,horiz=FALSE)
barplot(data2$x,names.arg=data2$Group.1,axisnames=TRUE,horiz=TRUE)
barplot(data2$x,names.arg=data2$Group.1,axisnames=TRUE)
?par
par(las=2)
?par
barplot(data2$x,names.arg=data2$Group.1,axisnames=TRUE)
barplot(data2$x,names.arg=data2$Group.1,axisnames=TRUE,space=1)
barplot(data2$x,names.arg=data2$Group.1,axisnames=TRUE,space=4)
barplot(data2$x,names.arg=data2$Group.1,axisnames=TRUE)
?par
barplot(data2$x,names.arg=data2$Group.1,axisnames=TRUE)
averageSteps <- aggregate(data$steps,by=list(data$date),FUN=mean,na.rm=TRUE)
medianSteps <- aggregate(data$steps,by=list(data$date),FUN=median,na.rm=TRUE)
barplot(averageSteps$x,names.arg=data2$Group.1,axisnames=TRUE)
barplot(medianSteps$x,names.arg=data2$Group.1,axisnames=TRUE)
medianSteps
?aggregate
averageSteps <- aggregate(data$steps,by=list(data$date),FUN=mean,na.rm=TRUE)
medianSteps <- aggregate(data$steps,by=list(data$date),FUN=median,na.rm=TRUE)
medianSteps
averageSteps
medianSteps <- aggregate(data$steps,by=list(data$date),FUN=median,na.rm=TRUE)
medianSteps
medianSteps <- aggregate(data$steps,by=list(data$date),FUN=lol,na.rm=TRUE)
median([1,2,3])
median(c(1,2,3))
median(c(1.1,2.2,3.3))
data$steps
medianSteps <- aggregate(data$steps,by=list(data$date),FUN=lol,na.rm=TRUE)
data$interval
averageDaily <- aggregate(data$steps,by=list(data$interval),FUN=mean,na.rm=TRUE)
plot(data$interval,averageDaily)
plot(averageDaily$x,averageDaily$Group.1)
plot(averageDaily$Group.1,averageDaily$x)
plot(averageDaily$Group.1,averageDaily$x,style='l')
plot(averageDaily$Group.1,averageDaily$x,type='l')
plot(averageDaily$Group.1,averageDaily$x,type='l',xlab="5-minute interval",ylab="average number of steps")
max(averageDaily)
?max
which.max(averageDaily)
which.max(averageDaily$x)
averageDaily[which.max(averageDaily$x),1]
averageDaily[which.max(averageDaily$x),2]
averageDaily[which.max(averageDaily$x),3]
averageDaily
which.max(averageDaily$x)
averageDaily[which.max(averageDaily$x),1]
is.na(data)
sum(max(is.na(data)))
max(is.na(data))
is.na(data)
sum(is.na(data))
data[1:10]
data[1:10,]
data[10:30]
data[10:30,]
data[10:300,]
blue = c(c(NA),c(NA))
blue
is.na(blueÃ )
is.na(blue)
sum(is.na(blue))
sum(max(is.na(blue),1))
sum(max(is.na(blue),2))
sum(max(is.na(data),1))
sum(max(is.na(data),2))
max(is.na(data),1)
max(is.na(data),2)
max(is.na(data),3)
?max
table(is.na(data)==TRUE)
su(is.na(data)==TRUE)
sum(is.na(data)==TRUE)
data$steps[is.na(data$steps)] <- averageDaily$x[which(averageDaily$Group.1 == data$interval)]
for i=0:nrow(data)
for (i in 1:nrow(data))
;
for(i in 1:nrow(data))
{
if (is.na(data$steps[i]))
{
data$steps[i] <- averageDaily$x[which(averageDaily$group.1==data$interval[i]),]
}
}
for(i in 1:nrow(data))
{
if (is.na(data$steps[i]))
{
data$steps[i] <- averageDaily[which(averageDaily$group.1==data$interval[i]),]$x
}
}
averageDaily[which(averageDaily$group.1==5),]$x
averageDaily[which(averageDaily$group.1==6),]$x
averageDaily[which(averageDaily$group.1==10),]$x
which(averageDaily$group.1==10)
which(averageDaily$group.1==5)
averageDaily
for(i in 1:nrow(data))
{
if (is.na(data$steps[i]))
{
data$steps[i] <- averageDaily[which(averageDaily$Group.1==data$interval[i]),]$x
}
}
data
data2 <- read.csv
data2 <- read.csv()
data2 <- read.csv("activity.csv")
data2[1:10,]
data[1:10,]
tail(data)
tail(data2)
data
?weekdays
conversion <- mapvalues(weekdays(data$date),
c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"),
c(rep("weekday", 5), rep("weekend", 2)))
library(plyr)
conversion <- mapvalues(weekdays(data$date),
c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"),
c(rep("weekday", 5), rep("weekend", 2)))
data$date
weekdays(data$date)
weekdays(data$date,abbreviate=TRUE)
weekdays(2012-11-04)
weekdays("2012-11-04")
weekdays(c("2012-11-04"))
weekdays(c(2012-11-04))
weekdays(c(Date(2012-11-04)))
weekdays(c(Date("2012-11-04")))
data$date
conversion <- mapvalues(weekdays(data$date),
c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"),
c(rep("weekday", 5), rep("weekend", 2)))
factor(days)
conversion <- mapvalues(weekdays(as.Date(data$date)),
c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"),
c(rep("weekday", 5), rep("weekend", 2)))
weekdays(as.Date(data$date))
Sys.setlocale("LC_TIME", "en_US")
weekdays(as.Date(data$date))
conversion <- mapvalues(weekdays(as.Date(data$date)),
c("lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche"),
c(rep("weekday", 5), rep("weekend", 2)))
conversion$
;
conversion
Sys.setlocale("LC_TIME","English United States")
weekdays(Sys.Date()+0:6)
conversion <- mapvalues(weekdays(as.Date(data$date)),
c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday", "Sunday"),
c(rep("weekday", 5), rep("weekend", 2)))
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(Day)$wday + 1]
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(Day)$wday + 1]
data<-conversion <- factor(mapvalues(weekdays(as.Date(data$date)),
c("lundi", "mardi", "mercredi", "jeudi", "vendredi","samedi", "dimanche"),
c(rep("weekday", 5), rep("weekend", 2))))
data
data
data <- read.csv()
data <- read.csv("activity.csv")
for(i in 1:nrow(data))
{
if (is.na(data$steps[i]))
{
data$steps[i] <- averageDaily[which(averageDaily$Group.1==data$interval[i]),]$x
}
}
data$conversion <- factor(mapvalues(weekdays(as.Date(data$date)),
c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday", "Sunday"),
c(rep("weekday", 5), rep("weekend", 2))))
data$conversion <- factor(mapvalues(weekdays(as.Date(data$date)),
c("lundi", "mardi", "mercredi", "jeudi", "vendredi","samedi", "dimanche"),
c(rep("weekday", 5), rep("weekend", 2))))
data
averageDaily <- aggregate(data$steps,by=list(data<-conversion),FUN=mean,na.rm=TRUE)
averageDaily <- aggregate(data$steps,by=list(data$conversion),FUN=mean,na.rm=TRUE)
data
data <- read.csv("activity.csv")
for(i in 1:nrow(data))
{
if (is.na(data$steps[i]))
{
data$steps[i] <- averageDaily[which(averageDaily$Group.1==data$interval[i]),]$x
}
}
for(i in 1:nrow(data))
{
if (is.na(data$steps[i]))
{
data$steps[i] <- averageDaily[which(averageDaily$Group.1==data$interval[i]),]$x
}
}
data
averageDaily <- aggregate(data$steps,by=list(data$conversion),FUN=mean,na.rm=TRUE)
data$conversion <- factor(mapvalues(weekdays(as.Date(data$date)),
c("lundi", "mardi", "mercredi", "jeudi", "vendredi","samedi", "dimanche"),
c(rep("weekday", 5), rep("weekend", 2))))
averageDaily <- aggregate(data$steps,by=list(data$conversion),FUN=mean,na.rm=TRUE)
data
plot(averageDaily$Group.1,averageDaily$x,type='l',xlab="5-minute interval",ylab="average number of steps")
averageDaily
ggplot(averageDaily, aes(x=Interval, y=x)) + geom_line() +
facet_grid(Weekday ~ .) +
labs(title="5-minute interval, average number of steps taken",
x="Interval", y="Average number of steps")
averageStepsPerDay <- aggregate(data$steps, list(Interval=as.numeric(as.character(data$interval)), Weekday= data$conversion), mean)
ggplot(averageDaily, aes(x=Interval, y=x)) + geom_line() +
facet_grid(Weekday ~ .) +
labs(title="5-minute interval, average number of steps taken",
x="Interval", y="Average number of steps")
ggplot(averageDaily, aes(x=Interval, y=x)) + geom_line() +
facet_grid(Weekday ~ .) +
labs(title="5-minute interval, average number of steps taken",
x="Interval", y="Average number of steps")
ggplot(averageDaily, aes(x=Interval, y=x)) + geom_line() +
facet_grid(conversion ~ .) +
labs(title="5-minute interval, average number of steps taken",
x="Interval", y="Average number of steps")
weekday=subset(data,data$conversion=="weekday")
plot(weekday$interval,weekday$step)
weekday=subset(data,data$conversion=="weekday",type='l')
weekday=subset(data,data$conversion=="weekday",type="l")
plot(weekday$interval,weekday$step,type="l")
plot(weekday$interval,weekday$step,type="l")
plot(weekday$interval,weekday$step,type="l")
weekday=subset(data,data$conversion=="weekday")
weekend=subset(data,data$conversion=="weekend")
weekdaystep = tapply(X = weekday$steps, INDEX = weekday$interval,FUN = mean)
plot(x=weekday$interval[1:288],y=weekdaystep,type="l",xlab="5-min interval",ylab="average number of steps on weekdays")
weekdaystep
weekday=subset(data,data$conversion=="weekday",na.rm=TRUE)
weekend=subset(data,data$conversion=="weekend")
weekday=subset(data,data$conversion=="weekday",na.rm=TRUE)
weekend=subset(data,data$conversion=="weekend",na.rm=TRUE)
plot(x=weekday$interval[1:288],y=weekdaystep,type="l",xlab="5-min interval",ylab="average number of steps on weekdays")
weekday=subset(data,data$conversion=="weekday",na.rm=TRUE)
weekend=subset(data,data$conversion=="weekend",na.rm=TRUE)
weekdaystep = tapply(X = weekday$steps, INDEX = weekday$interval,FUN = mean)
plot(x=weekday$interval[1:288],y=weekdaystep,type="l",xlab="5-min interval",ylab="average number of steps on weekdays")
weekdaystep
data
data$steps
for(i in 1:nrow(data))
{
if (is.na(data$steps[i]))
{
data$steps[i] <- averageDaily[which(averageDaily$Group.1==data$interval[i]),]$x
}
}
averageDaily <- aggregate(data$steps,by=list(data$interval),FUN=mean,na.rm=TRUE)
for(i in 1:nrow(data))
{
if (is.na(data$steps[i]))
{
data$steps[i] <- averageDaily[which(averageDaily$Group.1==data$interval[i]),]$x
}
}
data
weekday=subset(data,data$conversion=="weekday",na.rm=TRUE)
weekend=subset(data,data$conversion=="weekend",na.rm=TRUE)
weekdaystep = tapply(X = weekday$steps, INDEX = weekday$interval,FUN = mean)
plot(x=weekday$interval[1:288],y=weekdaystep,type="l",xlab="5-min interval",ylab="average number of steps on weekdays")
weekendstep = tapply(X = weekend$steps, INDEX = weekend$interval,FUN = mean)
weekday=subset(data,data$conversion=="weekday",na.rm=TRUE)
weekend=subset(data,data$conversion=="weekend",na.rm=TRUE)
weekdaystep = tapply(X = weekday$steps, INDEX = weekday$interval,FUN = mean)
plot(x=weekday$interval[1:288],y=weekdaystep,type="l",xlab="5-min interval",ylab="average number of steps on weekdays")
weekendstep = tapply(X = weekend$steps, INDEX = weekend$interval,FUN = mean)
plot(x=weekday$interval[1:288],y=weekendstep,type="l",xlab="5-min interval",ylab="average number of steps on weekdays")
library(knitr)
install.packages("knitr")
setwd("C:\Users\alexis\Documents\GitHub\RepData_PeerAssessment1")
setwd("C:\\Users\alexis\Documents\GitHub\RepData_PeerAssessment1")
setwd("C:\\Users\\alexis\\Documents\\GitHub\\RepData_PeerAssessment1")
dir()
library(knitr)
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
?par
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit("PA1_template.Rmd")
knit("PA1_template.Rmd")
